import { useEffect, useState } from 'react';
import { Link } from 'react-router-dom';
import * as XLSX from 'xlsx';

function DriversInfo() {
  const [driversData, setDriversData] = useState({});
  const [filteredDriver, setFilteredDriver] = useState('all');
  const [error, setError] = useState('');
  const [startDate, setStartDate] = useState('');
  const [endDate, setEndDate] = useState('');

  useEffect(() => {
    const fetchDriversInfo = async () => {
      const token = localStorage.getItem('token');
      try {
        const resp = await fetch('http://127.0.0.1:8000/api/v1/drivers_info', {
          headers: {
            Authorization: `Bearer ${token}`,
          },
        });

        if (!resp.ok) throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ –≤–æ–¥–∏—Ç–µ–ª—è—Ö');

        const json = await resp.json();
        setDriversData(json.data);
      } catch (err) {
        setError(err.message);
      }
    };

    fetchDriversInfo();
  }, []);

  const handleExport = () => {
    const exportData = [];

  

  
    Object.entries(visibleData).forEach(([driver, fuels]) => {
      Object.entries(fuels).forEach(([fuel, qty]) => {
        exportData.push({
          '–í–æ–¥–∏—Ç–µ–ª—å': driver,
          '–¢–∏–ø —Ç–æ–ø–ª–∏–≤–∞': fuel,
          '–î–æ—Å—Ç—É–ø–Ω–æ': qty,
        });
      });
    });
  
    const worksheet = XLSX.utils.json_to_sheet(exportData);
    const workbook = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(workbook, worksheet, '–í–æ–¥–∏—Ç–µ–ª–∏');
    XLSX.writeFile(workbook, 'drivers_info.xlsx');
  };

  const handleUsedTicketsExport = async () => {
    if (!startDate || !endDate) {
      setError("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–±–µ –¥–∞—Ç—ã");
      return;
    }
  
    const start = new Date(startDate);
    const end = new Date(endDate);
    const diff = (end - start) / (1000 * 60 * 60 * 24);
  
    if (diff < 0) {
      setError("–î–∞—Ç–∞ –∫–æ–Ω—Ü–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –Ω–∞—á–∞–ª–∞");
      return;
    }
    if (diff > 93) {
      setError("–ò–Ω—Ç–µ—Ä–≤–∞–ª –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å 3 –º–µ—Å—è—Ü–µ–≤");
      return;
    }
  
    try {
      const token = localStorage.getItem('token');
      const resp = await fetch(`http://127.0.0.1:8000/api/v1/used_tickets_info?start=${startDate}&end=${endDate}`, {
        headers: {
          Authorization: `Bearer ${token}`,
        },
      });
  
      if (!resp.ok) throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö —Ç–∞–ª–æ–Ω–æ–≤');
      const result = await resp.json();
      const usedData = result.data || [];
  
      const formatted = usedData.map(([user, gsm, quantity, used_time]) => ({
        '–í–æ–¥–∏—Ç–µ–ª—å': user,
        '–¢–∏–ø —Ç–æ–ø–ª–∏–≤–∞': gsm,
        '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ': quantity,
        '–î–∞—Ç–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è': used_time,
      }));
  
      const worksheet = XLSX.utils.json_to_sheet(formatted);
      const workbook = XLSX.utils.book_new();
      XLSX.utils.book_append_sheet(workbook, worksheet, '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç–∞–ª–æ–Ω–æ–≤');
      XLSX.writeFile(workbook, 'used_tickets.xlsx');
    } catch (err) {
      setError(err.message);
    }
  };
  
  

  const availableDrivers = Object.keys(driversData);
  const visibleData =
    filteredDriver === 'all'
      ? driversData
      : { [filteredDriver]: driversData[filteredDriver] };

  return (
    <div style={{ padding: '20px' }}>
      <h2>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∞–ª–æ–Ω–∞—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π</h2>
      {error && <p style={{ color: 'red' }}>{error}</p>}

      <div style={{ marginBottom: '15px' }}>
        <label htmlFor="driver-filter">–§–∏–ª—å—Ç—Ä –ø–æ –≤–æ–¥–∏—Ç–µ–ª—é: </label>
        <select
          id="driver-filter"
          value={filteredDriver}
          onChange={(e) => setFilteredDriver(e.target.value)}
        >
          <option value="all">–í—Å–µ –≤–æ–¥–∏—Ç–µ–ª–∏</option>
          {availableDrivers.map((driver) => (
            <option key={driver} value={driver}>
              {driver}
            </option>
          ))}
        </select>
      </div>

      <button onClick={handleExport} style={{ marginBottom: '15px' }}>
        üì• –°–∫–∞—á–∞—Ç—å Excel(–æ—Å—Ç–∞—Ç–∫–∏)
      </button>

      <div>
        <label>–°: <input type="date" value={startDate} onChange={e => setStartDate(e.target.value)} /></label>
        <label>–ü–æ: <input type="date" value={endDate} onChange={e => setEndDate(e.target.value)} /></label>
        <button onClick={handleUsedTicketsExport}>üìÑ –°–∫–∞—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–º —Ç–∞–ª–æ–Ω–∞–º</button>
      </div>
      



      {Object.keys(visibleData).length === 0 ? (
        <p>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö</p>
      ) : (
        <table border="1" cellPadding="8" cellSpacing="0">
          <thead>
            <tr>
              <th>–í–æ–¥–∏—Ç–µ–ª—å</th>
              <th>–¢–∏–ø —Ç–æ–ø–ª–∏–≤–∞</th>
              <th>–î–æ—Å—Ç—É–ø–Ω–æ</th>
            </tr>
          </thead>
          <tbody>
            {Object.entries(visibleData).map(([driver, fuels]) =>
              Object.entries(fuels).map(([fuel, qty], idx) => (
                <tr key={`${driver}-${fuel}`}>
                  {idx === 0 ? (
                    <td rowSpan={Object.keys(fuels).length}>{driver}</td>
                  ) : null}
                  <td>{fuel}</td>
                  <td>{qty}</td>
                </tr>
              ))
            )}
          </tbody>
        </table>
      )}
      <Link to="/manager" style={{ display: 'inline-block', marginTop: '20px' }}>
        ‚Üê –í–µ—Ä–Ω—É—Ç—å—Å—è
      </Link>
    </div>
  );
}

export default DriversInfo;
