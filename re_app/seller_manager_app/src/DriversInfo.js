import { useEffect, useState } from 'react';
import { Link } from 'react-router-dom';
import * as XLSX from 'xlsx';

function DriversInfo() {
  const [driversData, setDriversData] = useState({});
  const [error, setError] = useState('');

  useEffect(() => {
    const fetchDriversInfo = async () => {
      const token = localStorage.getItem('token');
      try {
        const resp = await fetch('http://127.0.0.1:8000/api/v1/all_drivers_info', {
          headers: {
            Authorization: `Bearer ${token}`,
          },
        });

        if (!resp.ok) throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ –≤–æ–¥–∏—Ç–µ–ª—è—Ö');

        const json = await resp.json();
        setDriversData(json.data); // –æ–∂–∏–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å { "–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω": { "92": 100, "95": 50 }, ... }
      } catch (err) {
        setError(err.message);
      }
    };

    fetchDriversInfo();
  }, []);

  const handleExport = () => {
    const exportData = [];

    Object.entries(driversData).forEach(([org, drivers]) => {
      Object.entries(drivers).forEach(([driver, fuels]) => {
        Object.entries(fuels).forEach(([fuel, qty]) => {
          exportData.push({
            –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: org,
            –í–æ–¥–∏—Ç–µ–ª—å: driver,
            '–¢–∏–ø —Ç–æ–ø–ª–∏–≤–∞': fuel,
            –î–æ—Å—Ç—É–ø–Ω–æ: qty,
          });
        });
      });
    });

    const worksheet = XLSX.utils.json_to_sheet(exportData);
    const workbook = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(workbook, worksheet, '–û—Å—Ç–∞—Ç–∫–∏');
    XLSX.writeFile(workbook, 'drivers_fuel_all.xlsx');
  };

  const handleUsedExport = async () => {
    const token = localStorage.getItem('token');
    try {
      const resp = await fetch('http://127.0.0.1:8000/api/v1/used_tickets_info', {
        headers: {
          Authorization: `Bearer ${token}`,
        },
      });

      if (!resp.ok) throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö —Ç–∞–ª–æ–Ω–æ–≤');

      const json = await resp.json();
      const usedData = json.data || [];

      const formatted = usedData.map(([user, fuel, qty, date]) => ({
        –í–æ–¥–∏—Ç–µ–ª—å: user,
        '–¢–∏–ø —Ç–æ–ø–ª–∏–≤–∞': fuel,
        –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: qty,
        '–î–∞—Ç–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è': date,
      }));

      const worksheet = XLSX.utils.json_to_sheet(formatted);
      const workbook = XLSX.utils.book_new();
      XLSX.utils.book_append_sheet(workbook, worksheet, '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ');
      XLSX.writeFile(workbook, 'used_tickets_all.xlsx');
    } catch (err) {
      alert(err.message);
    }
  };

  return (
    <div style={{ padding: '20px' }}>
      <h2>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∞–ª–æ–Ω–∞—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π</h2>
      {error && <p style={{ color: 'red' }}>{error}</p>}

      <div style={{ marginBottom: '15px' }}>
        <button onClick={handleExport}>üì• –°–∫–∞—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã</button>
        <button onClick={handleUsedExport} style={{ marginLeft: '10px' }}>
          üìÑ –°–∫–∞—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é —Ç–∞–ª–æ–Ω–æ–≤
        </button> 
      </div>

      {Object.keys(driversData).length === 0 ? (
        <p>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö</p>
      ) : (
        <table border="1" cellPadding="8" cellSpacing="0">
          <thead>
            <tr>
              <th>–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è</th>
              <th>–í–æ–¥–∏—Ç–µ–ª—å</th>
              <th>–¢–∏–ø —Ç–æ–ø–ª–∏–≤–∞</th>
              <th>–î–æ—Å—Ç—É–ø–Ω–æ</th>
            </tr>
          </thead>
          <tbody> 
            {Object.entries(driversData).map(([org, drivers]) => {
              const totalRows = Object.values(drivers).reduce(
                (sum, fuels) => sum + Math.max(1, Object.keys(fuels).length),
                0
              );

              let orgRowRendered = false;

              return Object.entries(drivers).map(([driver, fuels]) => {
                const fuelKeys = Object.keys(fuels);
                const driverRows = Math.max(1, fuelKeys.length);
                let driverRowRendered = false;

                return fuelKeys.length > 0
                  ? fuelKeys.map((fuel, fuelIdx) => (
                      <tr key={`${org}-${driver}-${fuel}`}>
                        {!orgRowRendered && !driverRowRendered && fuelIdx === 0 && (
                          <td rowSpan={totalRows}>{org}</td>
                        )}
                        {!driverRowRendered && fuelIdx === 0 && (
                          <td rowSpan={driverRows}>{driver}</td>
                        )}
                        <td>{fuel}</td>
                        <td>{fuels[fuel]}</td>
                        {fuelIdx === 0 && (orgRowRendered = true)}
                        {fuelIdx === 0 && (driverRowRendered = true)}
                      </tr>
                    ))
                  : (
                      <tr key={`${org}-${driver}-none`}>
                        {!orgRowRendered && (
                          <td rowSpan={totalRows}>{org}</td>
                        )}
                        <td>{driver}</td>
                        <td colSpan="2" style={{ textAlign: 'center' }}>–ù–µ—Ç —Ç–∞–ª–æ–Ω–æ–≤</td>
                        {orgRowRendered = true}
                      </tr>
                    );
              });
            })}
          </tbody>

        </table>
      )}
      <Link to="/manager" style={{ display: 'inline-block', marginBottom: '15px' }}>
        –≤–µ—Ä–Ω—É—Ç—å—Å—è
      </Link>
    </div>
  );
}

export default DriversInfo;
